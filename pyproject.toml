[project]
name = "fastapi_base"
version = "0.1.0"
description = ""
authors = [
    { name = "toandev020101", email = "toandev020101@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.10,<4.0"
dependencies = [
    "fastapi (>=0.115.11,<0.116.0)",
    "uvicorn (>=0.34.0,<0.35.0)",
    "sqlalchemy (>=2.0.39,<3.0.0)",
    "psycopg2 (>=2.9.10,<3.0.0)",
    "pydantic (>=2.10.6,<3.0.0)",
    "pydantic-settings (>=2.8.1,<3.0.0)",
    "passlib[bcrypt] (>=1.7.4,<2.0.0)",
    "celery (>=5.4.0,<6.0.0)",
    "redis (>=5.2.1,<6.0.0)",
    "boto3 (>=1.37.11,<2.0.0)",
    "asyncpg (>=0.30.0,<0.31.0)",
    "fastapi-limiter (>=0.1.6,<0.2.0)",
    "loguru (>=0.7.3,<0.8.0)",
    "alembic (>=1.15.1,<2.0.0)",
    "pytz (>=2025.1,<2026.0)",
    "typing-inspect (>=0.9.0,<0.10.0)",
    "cryptography (>=44.0.2,<45.0.0)",
    "pyjwt (>=2.10.1,<3.0.0)",
    "pytest (>=8.3.5,<9.0.0)",
    "ruff (>=0.11.2,<0.12.0)",
    "allure-pytest (>=2.13.5,<3.0.0)",
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Only check Python files
include = ["app/**/*.py", "tests/**/*.py"]
ignore = ["B008", "ANN101", "ANN102", "ANN002", "ANN003", "N805", "ANN401", "B026", "S101"]

# Linting rules to check (Following Flake8 standards)
select = [
    "E", # Pycodestyle errors
    "W", # Pycodestyle warnings
    "F", # Pyflakes (error detection)
    "I", # Import sorting (isort)
    "N", # Naming conventions (PEP8-naming)
    "UP", # Auto-upgrade Python syntax
    "C90", # McCabe complexity (prevent overly complex code)
    "PERF", # Performance improvements
    "PL", # pylint-like rules
    "B", # Bugbear (detect potential bugs)
    "A", # Avoidable errors
    "C4", # Comprehensions
    "T20", # Print statement detection
    "SIM", # Code simplification
    "S",
    "TID",
    "RUF100",
    "PERF",
    "F401",
    "ANN"
]

# Rules that can be automatically fixed with --fix
fixable = ["ALL"]

# Use Black formatting standards
line-length = 120
target-version = "py310"

# Enforce proper docstring format
[tool.ruff.pydocstyle]
convention = "google"  # Can be changed to "numpy" or "pep257"

# Automatically sort imports like isort
[tool.ruff.isort]
known-first-party = ["fastapi_base"]  # Replace with your main module name
combine-as-imports = true

# Limit function/method complexity (to prevent overly complicated code)
[tool.ruff.mccabe]
max-complexity = 10

# Enforce f-strings over format() for string formatting
[tool.ruff.pyupgrade]
keep-runtime-typing = true

[tool.ruff.pylint]
max-statements = 50  # Limit the number of statements per function
max-args = 6         # Limit the number of arguments in a function
max-locals = 20      # Limit the number of local variables in a function
max-public-methods = 20 # OOP best practices
